@baseUrl = http://localhost:3001
@registerUserEmail = test.user.001@inventory.com
@registerUserPassword = SecurePassword123
@registerUserUsername = tester001
@jwtToken = 

// ===============================================
// @name: The JWT token obtained from a successful login
// ===============================================

### 2. Register a New User (POST /api/auth/register)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
    "username": "{{registerUserUsername}}",
    "email": "{{registerUserEmail}}",
    "password": "{{registerUserPassword}}",
    "first_name": "Test",
    "last_name": "User"
}

// @response-post-request-script
// This script runs after the register request completes.
// It tries to store the received JWT for the next request.
{%
  client.global.set("jwtToken", response.body.token);
%}

---

### 3. Log in Existing User (POST /api/auth/login)
// Run this request after a successful registration to get a fresh token.
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
    "email": "{{registerUserEmail}}",
    "password": "{{registerUserPassword}}"
}

// @response-post-request-script
// This script automatically captures the 'token' from the response body 
// and stores it in the 'jwtToken' variable for use in protected routes.
{%
  client.global.set("jwtToken", response.body.token);
  client.log("JWT Token captured: " + response.body.token);
%}

---

### 4. Test a Protected Route (Example: GET /api/inventory)
// This request requires the JWT captured in step 3 to be present in the header.
GET {{baseUrl}}/api/inventory
Authorization: Bearer {{jwtToken}}

---

### 5. Test Access with an Invalid Token
GET {{baseUrl}}/api/inventory
Authorization: Bearer invalid.token.fake

---